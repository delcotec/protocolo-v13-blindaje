<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Protocolo V13 | Solicitud de Blindaje</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700;900&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #0d1117; /* Fondo oscuro tipo consola */
            color: #ffffff;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
        }
        #terminal-card {
            background: #161b22; /* Color de tarjeta más oscuro */
            border: 1px solid #30363d;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.4);
        }
        .blinking-cursor {
            font-weight: 900;
            animation: blink 0.7s infinite;
        }
        @keyframes blink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0; }
        }
        /* Estilo para los mensajes de la consola */
        .console-message {
            margin-bottom: 4px;
            font-size: 0.875rem;
        }
        .input-line {
            display: flex;
            align-items: center;
        }
        #input-key {
            background: transparent;
            border: none;
            outline: none;
            color: #ffffff;
            flex-grow: 1;
            padding-left: 5px;
            font-family: 'Inter', sans-serif;
            font-size: 1rem;
            caret-color: #38a169; /* Verde para el cursor */
        }
        .prompt {
            color: #38a169; /* Verde para el prompt */
            font-weight: bold;
        }
    </style>
</head>
<body>

    <script type="module">
        // --- CONFIGURACIÓN E IMPORTACIONES DE FIREBASE ---
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, addDoc, collection, setDoc, serverTimestamp, getDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        import { setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Variables Globales OBLIGATORIAS del entorno Canvas
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        let app;
        let db;
        let auth;
        let userId = 'anonymous';

        // Elementos DOM
        const consoleLog = document.getElementById('console-log');
        const inputKey = document.getElementById('input-key');
        const submitButton = document.getElementById('submit-btn');
        const modal = document.getElementById('modal');
        const modalMessage = document.getElementById('modal-message');

        // Función de utilidad para Base64
        function base64ToArrayBuffer(base64) {
            const binary_string = window.atob(base64);
            const len = binary_string.length;
            const bytes = new Uint8Array(len);
            for (let i = 0; i < len; i++) {
                bytes[i] = binary_string.charCodeAt(i);
            }
            return bytes.buffer;
        }

        // --- FUNCIONES DE CONSOLA (UI) ---

        function logMessage(text, color = 'text-gray-400') {
            const p = document.createElement('p');
            p.className = `console-message ${color}`;
            p.innerHTML = text;
            consoleLog.appendChild(p);
            consoleLog.scrollTop = consoleLog.scrollHeight;
        }

        function showModal(message, type = 'success') {
            let bgColor = type === 'success' ? 'bg-green-600' : 'bg-red-600';
            modalMessage.textContent = message;
            modalMessage.parentElement.className = `fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center z-50 transition-opacity duration-300`;
            modal.querySelector('.bg-gray-800').classList.remove('bg-red-600', 'bg-green-600', 'bg-yellow-600');
            modal.querySelector('.bg-gray-800').classList.add(bgColor);
            modal.classList.remove('hidden');
        }

        function hideModal() {
            modal.classList.add('hidden');
            modal.querySelector('.bg-gray-800').classList.add('bg-gray-800');
        }

        // --- LÓGICA DE FIREBASE Y AUTENTICACIÓN ---

        async function initializeFirebase() {
            if (!firebaseConfig) {
                logMessage("ERROR: Configuración de Firebase no encontrada.", 'text-red-500');
                return;
            }

            try {
                // Habilitar logs para depuración (ayuda si hay problemas)
                setLogLevel('debug');

                app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);

                // 1. Intentar inicio de sesión con token personalizado (si está disponible)
                if (initialAuthToken) {
                    await signInWithCustomToken(auth, initialAuthToken);
                    logMessage(`[Auth]: Operador autenticado.`, 'text-green-400');
                } else {
                    // 2. Si no hay token, usar inicio de sesión anónimo
                    await signInAnonymously(auth);
                    logMessage(`[Auth]: Operador anónimo iniciado.`, 'text-yellow-400');
                }

                // Esperar a que el estado de autenticación se resuelva
                onAuthStateChanged(auth, (user) => {
                    if (user) {
                        userId = user.uid;
                        logMessage(`[System]: ID de Operador: ${userId.substring(0, 8)}...`, 'text-green-400');
                        document.getElementById('loading-state').classList.add('hidden');
                        document.getElementById('protocol-interface').classList.remove('hidden');
                        logMessage(`[System]: Sistema V13 en línea. Ingrese la CLAVE DE ACCESO.`, 'text-gray-300');
                        inputKey.focus();

                    } else {
                        logMessage(`[Auth]: Fallo en la autenticación. Reintentando...`, 'text-red-500');
                    }
                });

            } catch (error) {
                console.error("Error al inicializar o autenticar Firebase:", error);
                logMessage(`[CRITICAL ERROR]: Fallo en el núcleo de Firebase. Verifique su conexión.`, 'text-red-500');
            }
        }

        // --- LÓGICA DE REGISTRO DE DATOS (EL NÚCLEO) ---

        async function registerAccess(accessKey) {
            if (!db || !userId) {
                showModal("Error de Matriz: El sistema no está conectado a la base de datos.", 'error');
                return;
            }

            const clientIP = 'unknown'; // La IP real se obtendría en el backend, aquí solo mockeamos.
            const collectionPath = `artifacts/${appId}/public/data/v13_leads`;

            try {
                // Verificar si ya existe un lead con esta clave para este usuario
                const docRef = doc(db, collectionPath, userId);
                const docSnap = await getDoc(docRef);

                if (docSnap.exists()) {
                    showModal("EXPEDIENTE EN CURSO. Ya enviaste una clave. Espera la respuesta de Matriz.", 'error');
                    logMessage(`[WARNING]: Operador ${userId.substring(0, 8)} ya está en la cola.`, 'text-yellow-500');
                    return;
                }

                let status = 'PENDIENTE_BLINDAJE';
                let responseMessage = "CLAVE RECONOCIDA. El Protocolo de Transferencia será disparado a su IP en los próximos 60 segundos.";

                // Validación de la Clave Secreta
                if (accessKey.toUpperCase() === 'BLINDAJE') {
                    status = 'PENDIENTE_BLINDAJE';
                    responseMessage = "CLAVE MAESTRA RECONOCIDA. ACCESO AL EXPEDIENTE DE PAGO INMINENTE. NO CIERRE ESTA PÁGINA.";
                } else {
                    status = 'CLAVE_INCORRECTA';
                    responseMessage = "CLAVE NO VÁLIDA. Acceso denegado. Intente con la clave Blindaje.";
                }


                // Guardar/Actualizar el lead usando el userId como ID del documento (para evitar duplicados por usuario)
                await setDoc(docRef, {
                    userId: userId,
                    accessKey: accessKey,
                    status: status, // PENDIENTE_BLINDAJE o CLAVE_INCORRECTA
                    ipAddress: clientIP,
                    timestamp: serverTimestamp(),
                    userAgent: navigator.userAgent
                });

                showModal(responseMessage, status === 'PENDIENTE_BLINDAJE' ? 'success' : 'error');
                logMessage(`[SUCCESS]: Registro: ${status}`, status === 'PENDIENTE_BLINDAJE' ? 'text-green-500' : 'text-red-500');


            } catch (e) {
                console.error("Error al registrar el documento:", e);
                showModal("Fallo Crítico en el Registro. Intente de nuevo.", 'error');
            }
        }

        // --- MANEJADORES DE EVENTOS ---

        function handleInput() {
            const key = inputKey.value.trim();
            if (key) {
                registerAccess(key);
                inputKey.value = ''; // Limpiar campo
            } else {
                showModal("Ingrese la clave de acceso.", 'error');
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            initializeFirebase();

            // Event listener para el botón
            submitButton.addEventListener('click', handleInput);

            // Event listener para la tecla Enter
            inputKey.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    handleInput();
                }
            });

            // Event listener para cerrar el modal
            modal.addEventListener('click', (e) => {
                if (e.target.id === 'modal' || e.target.closest('#close-modal-btn')) {
                    hideModal();
                }
            });
        });
    </script>

    <!-- INTERFAZ DE CONSOLA -->
    <div id="terminal-card" class="w-full max-w-xl p-6 md:p-8 rounded-lg">
        <h1 class="text-2xl md:text-3xl font-black text-green-400 mb-6 text-center">
            PROTOCOLO V13: BLINDAJE
        </h1>

        <div id="loading-state" class="text-center py-10">
            <svg class="animate-spin h-5 w-5 text-green-500 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <p class="mt-3 text-gray-400">INICIANDO NÚCLEO...</p>
        </div>

        <div id="protocol-interface" class="hidden">
            <!-- Consola de Logs -->
            <div id="console-log" class="h-48 overflow-y-auto p-4 rounded bg-gray-900 mb-4 text-xs md:text-sm border border-gray-700">
                <p class="console-message text-yellow-500">[BOOT]: Iniciando Matriz de Contacto Segura...</p>
            </div>

            <!-- Interfaz de Entrada -->
            <div class="input-line">
                <span class="prompt">$ V13 ></span>
                <input type="text" id="input-key" placeholder="CLAVE DE ACCESO" maxlength="15">
                <button id="submit-btn" class="ml-2 px-4 py-2 bg-green-700 hover:bg-green-600 rounded-lg text-sm font-bold transition duration-200 shadow-md">
                    EJECUTAR
                </button>
            </div>
        </div>

        <p class="mt-6 text-xs text-gray-500 text-center">
            ID de la Aplicación: <span class="font-mono text-gray-400">${appId}</span>
        </p>

    </div>

    <!-- Modal de Notificación (Reemplaza alert()) -->
    <div id="modal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center z-50 transition-opacity duration-300">
        <div class="bg-gray-800 p-6 rounded-xl shadow-2xl max-w-sm w-full text-center border border-gray-700">
            <p id="modal-message" class="text-lg font-bold text-white mb-4"></p>
            <button id="close-modal-btn" class="px-6 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg text-white font-medium transition duration-200">
                CERRAR
            </button>
        </div>
    </div>

</body>
</html>